#!/usr/bin/env node

/**
 * Module dependencies.
 */
const http = require("http");
const cluster = require("cluster");
const os = require("os");
const config =
  require("../server/config")[process.env.NODE_ENV || "development"];
const app = require("../server/app")(config);
// To connect with your MongoDB database
const mongoose = require("mongoose");

const numCPUs = os.cpus().length;

// Helper functions

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server and listen on the provided port
 */
const server = http.createServer(app);

if (cluster.isMaster) {
  console.log(`Master ${process.pid} is running`);
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }
  cluster.on("exit", (worker) => {
    console.log(`Worker ${worker.process.pid} just died`);
    cluster.fork();
  });
} else {
  // db here
  // Connecting to database
  mongoose
    .connect("mongodb://localhost:27017/", {
      dbName: "advanceExpressDKhan",
      useNewUrlParser: true,
      useUnifiedTopology: true,
    })
    .then((res) => {
      console.log("Connected to Daniel Khan database");
    })
    .catch((error) => {
      console.log(error);
    });
}

server.listen(port);
server.on("listening", () => {
  const addr = server.address();
  const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
  console.log(`Listening on ${bind}`);
});

// Handle server errors
server.on("error", (error) => {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      console.log(error);
    // throw error;
  }
});
